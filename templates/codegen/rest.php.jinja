<?php

namespace {{ namespace }}\Rest;

use ByJG\Config\Exception\ConfigException;
use ByJG\Config\Exception\ConfigNotFoundException;
use ByJG\Config\Exception\DependencyInjectionException;
use ByJG\Config\Exception\InvalidDateException;
use ByJG\Config\Exception\KeyNotFoundException;
use ByJG\MicroOrm\Exception\InvalidArgumentException;
use ByJG\MicroOrm\Exception\OrmBeforeInvalidException;
use ByJG\MicroOrm\Exception\OrmInvalidFieldsException;
use ByJG\RestServer\Exception\Error400Exception;
use ByJG\RestServer\Exception\Error401Exception;
use ByJG\RestServer\Exception\Error403Exception;
use ByJG\RestServer\Exception\Error404Exception;
use ByJG\RestServer\HttpRequest;
use ByJG\RestServer\HttpResponse;
use ByJG\Serializer\BinderObject;
use OpenApi\Attributes as OA;
use ReflectionException;
use {{ namespace }}\Model\{{ className }};
use {{ namespace }}\Psr11;
use {{ namespace }}\Repository\{{ className }}Repository;
use {{ namespace }}\Model\User;
use {{ namespace }}\Util\JwtContext;
use {{ namespace }}\Util\OpenApiContext;

class {{ className }}Rest
{
    /**
     * Get the {{ className }} by id
     *
     * @param HttpResponse $response
     * @param HttpRequest $request
     * @throws ConfigException
     * @throws ConfigNotFoundException
     * @throws DependencyInjectionException
     * @throws Error401Exception
     * @throws Error404Exception
     * @throws InvalidArgumentException
     * @throws InvalidDateException
     * @throws KeyNotFoundException
     * @throws \ByJG\Serializer\Exception\InvalidArgumentException
     * @throws \Psr\SimpleCache\InvalidArgumentException
     * @throws ReflectionException
     */
    #[OA\Get(
        path: "/{{ restPath }}/{id}",
        security: [
            ["jwt-token" => []]
        ],
        tags: ["{{ restTag }}"],
    )]
    #[OA\Parameter(
        name: "id",
        in: "path",
        required: true,
        schema: new OA\Schema(
            type: "{{ fields.0.openapi_type }}",
            format: "{{ fields.0.openapi_format }}"
        )
    )]
    #[OA\Response(
        response: 200,
        description: "The object {{ className }}",
        content: new OA\JsonContent(ref: "#/components/schemas/{{ className }}")
    )]
    public function get{{ className }}(HttpResponse $response, HttpRequest $request): void
    {
        JwtContext::requireAuthenticated($request);

        ${{ varTableName }}Repo = Psr11::container()->get({{ className }}Repository::class);
        $id = $request->param('id');

        $result = ${{ varTableName }}Repo->get($id);
        if (empty($result)) {
            throw new Error404Exception('Id not found');
        }
        $response->write(
            $result
        );
    }

    /**
     * List {{ className }}
     *
     * @param mixed $response
     * @param mixed $request
     * @return void
     * @throws ConfigException
     * @throws ConfigNotFoundException
     * @throws DependencyInjectionException
     * @throws Error401Exception
     * @throws InvalidArgumentException
     * @throws InvalidDateException
     * @throws KeyNotFoundException
     * @throws \ByJG\Serializer\Exception\InvalidArgumentException
     * @throws \Psr\SimpleCache\InvalidArgumentException
     * @throws ReflectionException
     */
    #[OA\Get(
        path: "/{{ restPath }}",
        security: [
            ["jwt-token" => []]
        ],
        tags: ["{{ restTag }}"]
    )]
    #[OA\Parameter(
        name: "page",
        description: "Page number",
        in: "query",
        required: false,
        schema: new OA\Schema(
            type: "integer",
        )
    )]
    #[OA\Parameter(
        name: "size",
        description: "Page size",
        in: "query",
        required: false,
        schema: new OA\Schema(
            type: "integer",
        )
    )]
    #[OA\Parameter(
        name: "orderBy",
        description: "Order by",
        in: "query",
        required: false,
        schema: new OA\Schema(
            type: "string",
        )
    )]
    #[OA\Parameter(
        name: "filter",
        description: "Filter",
        in: "query",
        required: false,
        schema: new OA\Schema(
            type: "string",
        )
    )]
    #[OA\Response(
        response: 200,
        description: "The object {{ className }}",
        content: new OA\JsonContent(type: "array", items: new OA\Items(ref: "#/components/schemas/{{ className }}"))
    )]
    #[OA\Response(
        response: 401,
        description: "Not Authorized",
        content: new OA\JsonContent(ref: "#/components/schemas/error")
    )]
    public function list{{ className }}(HttpResponse $response, HttpRequest $request): void
    {
        JwtContext::requireAuthenticated($request);

        $repo = Psr11::container()->get({{ className }}Repository::class);

        $page = $request->get('page');
        $size = $request->get('size');
        // $orderBy = $request->get('orderBy');
        // $filter = $request->get('filter');

        $result = $repo->list($page, $size);
        $response->write(
            $result
        );
    }


    /**
     * Create a new {{ className }} 
     *
     * @param HttpResponse $response
     * @param HttpRequest $request
     * @return void
     * @throws ConfigException
     * @throws ConfigNotFoundException
     * @throws DependencyInjectionException
     * @throws Error400Exception
     * @throws Error401Exception
     * @throws Error403Exception
     * @throws InvalidArgumentException
     * @throws InvalidDateException
     * @throws KeyNotFoundException
     * @throws OrmBeforeInvalidException
     * @throws OrmInvalidFieldsException
     * @throws \ByJG\Serializer\Exception\InvalidArgumentException
     * @throws \Psr\SimpleCache\InvalidArgumentException
     * @throws ReflectionException
     */
    #[OA\Post(
        path: "/{{ restPath }}",
        security: [
            ["jwt-token" => []]
        ],
        tags: ["{{ restTag }}"]
    )]
    #[OA\RequestBody(
        description: "The object {{ className }} to be created",
        required: true,
        content: new OA\JsonContent(
            {% if nonNullableFields | count > 0 %}required: [ "{{ nonNullableFields | join('", "')}}" ],{% endif %}
            properties: [
{% for field in fields -%}{% if field.key != "PRI" && field.extra != 'VIRTUAL GENERATED' -%}
                new OA\Property(property: "{{ field.property }}", type: "{{ field.openapi_type }}", format: "{{ field.openapi_format }}"{% if field.null == "YES" %}, nullable: true{% endif %}){% if loop.last == false %}, {% endif %}
{% endif %}{% endfor %}
            ]
        )
    )]
    #[OA\Response(
        response: 200,
        description: "The object rto be created",
        content: new OA\JsonContent(
            required: [ "{{ primaryKeys | join('", "') }}" ],
            properties: [
{% for field in fields -%}
{% if field.key == 'PRI' -%}                new OA\Property(property: "{{ field.property }}", type: "{{ field.openapi_type }}", format: "{{ field.openapi_format }}"){% endif %}
{% endfor %}
            ]
        )
    )]
    #[OA\Response(
        response: 401,
        description: "Not Authorized",
        content: new OA\JsonContent(ref: "#/components/schemas/error")
    )]
    public function post{{ className }}(HttpResponse $response, HttpRequest $request): void
    {
        JwtContext::requireRole($request, User::ROLE_ADMIN);

        $payload = OpenApiContext::validateRequest($request);
        
        $model = new {{ className }}();
        BinderObject::bind($payload, $model);

        ${{ varTableName }}Repo = Psr11::container()->get({{ className }}Repository::class);
        ${{ varTableName }}Repo->save($model);

        $response->write([ "id" => $model->getId()]);
    }


    /**
     * Update an existing {{ className }} 
     *
     * @param HttpResponse $response
     * @param HttpRequest $request
     * @return void
     * @throws Error401Exception
     * @throws Error404Exception
     * @throws ConfigException
     * @throws ConfigNotFoundException
     * @throws DependencyInjectionException
     * @throws InvalidDateException
     * @throws KeyNotFoundException
     * @throws InvalidArgumentException
     * @throws OrmBeforeInvalidException
     * @throws OrmInvalidFieldsException
     * @throws Error400Exception
     * @throws Error403Exception
     * @throws \ByJG\Serializer\Exception\InvalidArgumentException
     * @throws \Psr\SimpleCache\InvalidArgumentException
     * @throws ReflectionException
     */
    #[OA\Put(
        path: "/{{ restPath }}",
        security: [
            ["jwt-token" => []]
        ],
        tags: ["{{ restTag }}"]
    )]
    #[OA\RequestBody(
        description: "The object {{ className }} to be updated",
        required: true,
        content: new OA\JsonContent(ref: "#/components/schemas/{{ className }}")
    )]
    #[OA\Response(
        response: 200,
        description: "Nothing to return"
    )]
    #[OA\Response(
        response: 401,
        description: "Not Authorized",
        content: new OA\JsonContent(ref: "#/components/schemas/error")
    )]
    public function put{{ className }}(HttpResponse $response, HttpRequest $request): void
    {
        JwtContext::requireRole($request, User::ROLE_ADMIN);

        $payload = OpenApiContext::validateRequest($request);

        ${{ varTableName }}Repo = Psr11::container()->get({{ className }}Repository::class);
        $model = ${{ varTableName }}Repo->get($payload['{{ fields.0.field }}']);
        if (empty($model)) {
            throw new Error404Exception('Id not found');
        }
        BinderObject::bind($payload, $model);

        ${{ varTableName }}Repo->save($model);
    }

}
