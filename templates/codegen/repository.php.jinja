<?php

namespace {{ namespace }}\Repository;

use {{ namespace }}\Psr11;
use ByJG\MicroOrm\Exception\OrmModelInvalidException;
use ReflectionException;
use ByJG\AnyDataset\Db\DbDriverInterface;
use ByJG\MicroOrm\Query;
use ByJG\MicroOrm\Repository;
use {{ namespace }}\Model\{{ className }};

class {{ className }}Repository extends BaseRepository
{
    /**
     * {{ className }}Repository constructor.
     *
     * @param DbDriverInterface $dbDriver
     * @throws OrmModelInvalidException
     * @throws ReflectionException
     */
    public function __construct(DbDriverInterface $dbDriver)
    {
        $this->repository = new Repository($dbDriver, {{ className }}::class);
    }
{% for index in indexes -%}
{% if index.key_name != 'PRIMARY' -%}
    /**
     * @param mixed ${{ index.camelColumnName }}
     * @return null|{{ className }}[]
     */
    public function getBy{{ index.camelColumnName | capitalize }}(${{ index.camelColumnName }})
    {
        $query = Query::getInstance()
            ->table('{{ tableName }}')
            ->where('{{ tableName }}.{{ index.column_name }} = :value', ['value' => ${{ index.camelColumnName }}]);
        $result = $this->repository->getByQuery($query);
        return $result;
    }
{% endif %}
{% endfor %}

}
